// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: grpc/proto/posts/post.proto

/*
Package onestory_story_proto is a generated protocol buffer package.

It is generated from these files:
	grpc/proto/posts/post.proto

It has these top-level messages:
	FullPost
	SafePost
	RequestQuerySingle
	RequestQuery
	Request
	Response
	ResponseList
	ResponseSafe
*/
package onestory_story_proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for PostsService service

type PostsService interface {
	InsertPostsInfo(ctx context.Context, in *Request, opts ...client.CallOption) (*ResponseSafe, error)
	UpdatePostsInfo(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	GetPostsList(ctx context.Context, in *RequestQuery, opts ...client.CallOption) (*ResponseList, error)
	GetPostById(ctx context.Context, in *RequestQuerySingle, opts ...client.CallOption) (*ResponseSafe, error)
}

type postsService struct {
	c    client.Client
	name string
}

func NewPostsService(name string, c client.Client) PostsService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "onestory.story.proto"
	}
	return &postsService{
		c:    c,
		name: name,
	}
}

func (c *postsService) InsertPostsInfo(ctx context.Context, in *Request, opts ...client.CallOption) (*ResponseSafe, error) {
	req := c.c.NewRequest(c.name, "PostsService.InsertPostsInfo", in)
	out := new(ResponseSafe)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postsService) UpdatePostsInfo(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "PostsService.UpdatePostsInfo", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postsService) GetPostsList(ctx context.Context, in *RequestQuery, opts ...client.CallOption) (*ResponseList, error) {
	req := c.c.NewRequest(c.name, "PostsService.GetPostsList", in)
	out := new(ResponseList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postsService) GetPostById(ctx context.Context, in *RequestQuerySingle, opts ...client.CallOption) (*ResponseSafe, error) {
	req := c.c.NewRequest(c.name, "PostsService.GetPostById", in)
	out := new(ResponseSafe)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PostsService service

type PostsServiceHandler interface {
	InsertPostsInfo(context.Context, *Request, *ResponseSafe) error
	UpdatePostsInfo(context.Context, *Request, *Response) error
	GetPostsList(context.Context, *RequestQuery, *ResponseList) error
	GetPostById(context.Context, *RequestQuerySingle, *ResponseSafe) error
}

func RegisterPostsServiceHandler(s server.Server, hdlr PostsServiceHandler, opts ...server.HandlerOption) {
	type postsService interface {
		InsertPostsInfo(ctx context.Context, in *Request, out *ResponseSafe) error
		UpdatePostsInfo(ctx context.Context, in *Request, out *Response) error
		GetPostsList(ctx context.Context, in *RequestQuery, out *ResponseList) error
		GetPostById(ctx context.Context, in *RequestQuerySingle, out *ResponseSafe) error
	}
	type PostsService struct {
		postsService
	}
	h := &postsServiceHandler{hdlr}
	s.Handle(s.NewHandler(&PostsService{h}, opts...))
}

type postsServiceHandler struct {
	PostsServiceHandler
}

func (h *postsServiceHandler) InsertPostsInfo(ctx context.Context, in *Request, out *ResponseSafe) error {
	return h.PostsServiceHandler.InsertPostsInfo(ctx, in, out)
}

func (h *postsServiceHandler) UpdatePostsInfo(ctx context.Context, in *Request, out *Response) error {
	return h.PostsServiceHandler.UpdatePostsInfo(ctx, in, out)
}

func (h *postsServiceHandler) GetPostsList(ctx context.Context, in *RequestQuery, out *ResponseList) error {
	return h.PostsServiceHandler.GetPostsList(ctx, in, out)
}

func (h *postsServiceHandler) GetPostById(ctx context.Context, in *RequestQuerySingle, out *ResponseSafe) error {
	return h.PostsServiceHandler.GetPostById(ctx, in, out)
}
