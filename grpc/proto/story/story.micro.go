// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: grpc/proto/story/story.proto

/*
Package onestory_story_proto is a generated protocol buffer package.

It is generated from these files:
	grpc/proto/story/story.proto

It has these top-level messages:
	StoryInfo
	RequestStoryId
	Response
	ResponseStoryList
*/
package onestory_story_proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for StoryService service

type StoryService interface {
	CreateStory(ctx context.Context, in *StoryInfo, opts ...client.CallOption) (*Response, error)
	GetStoryList(ctx context.Context, in *RequestStoryId, opts ...client.CallOption) (*ResponseStoryList, error)
	UpdateStory(ctx context.Context, in *StoryInfo, opts ...client.CallOption) (*Response, error)
}

type storyService struct {
	c    client.Client
	name string
}

func NewStoryService(name string, c client.Client) StoryService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "onestory.story.proto"
	}
	return &storyService{
		c:    c,
		name: name,
	}
}

func (c *storyService) CreateStory(ctx context.Context, in *StoryInfo, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "StoryService.CreateStory", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storyService) GetStoryList(ctx context.Context, in *RequestStoryId, opts ...client.CallOption) (*ResponseStoryList, error) {
	req := c.c.NewRequest(c.name, "StoryService.GetStoryList", in)
	out := new(ResponseStoryList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storyService) UpdateStory(ctx context.Context, in *StoryInfo, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "StoryService.UpdateStory", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for StoryService service

type StoryServiceHandler interface {
	CreateStory(context.Context, *StoryInfo, *Response) error
	GetStoryList(context.Context, *RequestStoryId, *ResponseStoryList) error
	UpdateStory(context.Context, *StoryInfo, *Response) error
}

func RegisterStoryServiceHandler(s server.Server, hdlr StoryServiceHandler, opts ...server.HandlerOption) {
	type storyService interface {
		CreateStory(ctx context.Context, in *StoryInfo, out *Response) error
		GetStoryList(ctx context.Context, in *RequestStoryId, out *ResponseStoryList) error
		UpdateStory(ctx context.Context, in *StoryInfo, out *Response) error
	}
	type StoryService struct {
		storyService
	}
	h := &storyServiceHandler{hdlr}
	s.Handle(s.NewHandler(&StoryService{h}, opts...))
}

type storyServiceHandler struct {
	StoryServiceHandler
}

func (h *storyServiceHandler) CreateStory(ctx context.Context, in *StoryInfo, out *Response) error {
	return h.StoryServiceHandler.CreateStory(ctx, in, out)
}

func (h *storyServiceHandler) GetStoryList(ctx context.Context, in *RequestStoryId, out *ResponseStoryList) error {
	return h.StoryServiceHandler.GetStoryList(ctx, in, out)
}

func (h *storyServiceHandler) UpdateStory(ctx context.Context, in *StoryInfo, out *Response) error {
	return h.StoryServiceHandler.UpdateStory(ctx, in, out)
}
